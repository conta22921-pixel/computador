name: Build Flet Android APK - Finalizado

# O workflow √© disparado em todo push para o 'main' (para builds de teste)
# E em todo push de tag que come√ßa com 'v' (para releases oficiais)
on:
  push:
    branches: [ "main" ]
    tags: 
      - 'v*.*.*' # Ex: v1.0.0, v2.5.1
  workflow_dispatch: # Permite rodar manualmente

jobs:
  # ----------------------------------------------------
  # JOB 1: CRIA√á√ÉO DO APK (ID: build_apk)
  # Este Job compila o projeto e salva o APK como um Artifact
  # ----------------------------------------------------
  build_apk:
    runs-on: ubuntu-latest
    outputs:
      apk_path: ${{ steps.set_path.outputs.path }} # Exporta o caminho principal do APK
      
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üöÄ Setup Flutter Environment
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2' # Vers√£o est√°vel moderna
          channel: 'stable'
          cache: true
          
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: ‚öôÔ∏è Install Flet and Dependencies
        run: |
          pip install --pre "flet" uv
          uv sync

      - name: üì¶ Run Flet Build APK
        run: flet build apk --verbose

      # Define a vari√°vel de sa√≠da para o caminho principal do APK
      - name: üìù Set APK Path Output
        id: set_path
        run: echo "path=build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_OUTPUT

      # CRUCIAL: Este passo salva o APK como um Artifact, para ser usado pelo pr√≥ximo Job
      - name: üì§ Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: newapp-android-apk
          path: ${{ steps.set_path.outputs.path }}
          if-no-files-found: error
  
  # ----------------------------------------------------
  # JOB 2: ENVIAR RELEASE E TELEGRAM (ID: release_notify)
  # Este Job s√≥ roda em releases (tags)
  # ----------------------------------------------------
  release_notify:
    needs: build_apk # Depende que o build_apk tenha sido bem-sucedido
    runs-on: ubuntu-latest
    # CR√çTICO: S√≥ executa se for uma tag (vX.Y.Z) ou for disparado manualmente.
    if: success() && (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      # 1. Baixa o APK (Artifact) do Job anterior
      - name: üì• Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: newapp-android-apk
          path: . # Baixa o APK no diret√≥rio raiz

      # 2. CRIA O RELEASE NO GITHUB E FAZ O UPLOAD DO ARQUIVO GRANDE
      - name: üè∑Ô∏è Create GitHub Release and Upload APK
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          # O APK foi baixado no diret√≥rio raiz na etapa anterior com o nome 'app-release.apk'
          files: app-release.apk 
          draft: false
          prerelease: false
          name: Release ${{ github.ref_name }} # Nome da Release (e.g., v1.0.0)
          
      # 3. ENVIA O LINK DA RELEASE P√öBLICA PARA O TELEGRAM
      - name: üöÄ Enviar Link para Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          parse_mode: markdown
          
          message: |
            ‚úÖ *Nova Release Flet Android Dispon√≠vel!*
            
            Vers√£o: `${{ github.ref_name }}`
            
            üì• [CLIQUE AQUI PARA BAIXAR O APK](${{ steps.create_release.outputs.upload_url }}/app-release.apk)
            
            [Ver no GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
